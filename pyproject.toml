[project]
name = "simple-agent-tutorial"
version = "1.0.0"
description = "Simple Agents to Learn LangGraph"
requires-python = ">=3.11,<=3.12"
dependencies = [
    "dotenv>=0.9.9",
    "langchain-community>=0.3.19",
    "langchain-openai>=0.3.9",
    "langchain>=0.3.20",
    "langgraph>=0.3.0",
    "pydantic>=2.5.0",
    "requests>=2.31.0",
    "langchain-anthropic>=0.3.10",
    "python-Levenshtein==0.27.1",
    "environs>=14.1.1",
]

[project.optional-dependencies]
dev = [
    "langgraph-cli[inmem]>=0.1.77",
    "mypy>=1.9.0",
    "pre-commit>=3.3.2",
    "ruff>=0.0.270",
    "types-requests>=2.31.0",
    "ipykernel>=6.29.5",
    "pytest>=8.0.0",
    "pytest-mock>=3.12.0",
    "rich>=13.9.4",
    "langgraph-sdk>=0.1.60",
    "langgraph-swarm>=0.0.7",
]


# ----------------------
# Ruff Configuration
# ----------------------
[tool.ruff]
# Enable common linting rules
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN101", # don't need a type annotation for self
    "ANN204", # we don't need to specify a type for the return value of __init__
    "COM812", # trailing comma (formtatter takes care of this)
    "D100", # don't need docstrings in every file
    "D101", # don't need docstrings in every class
    "D102", # don't need docstrings in every method
    "D103", # don't need docstrings in every function
    "D104", # don't need docstrings in every module
    "D106", # don't need docstrings in nested classes
    "D107", # don't need docstrings in __init__
    "D203", # don't want a space between class definition and docstring
    "D213", # don't want the first line of a docstring to be a blank line
    "EM101", # ok to specify a string in a error message
    "EM102", # ok to have f string when raising an error message
    "ERA001", # ok to have commented out code
    "FIX002", # ok to have TODO in code
    "INP001", # don't need __init__ in every folder
    "ISC001", # ruff says to turn off because the formatter takes care of this
    "RET504", # sometimes we want to define a variable and then return it for readability
    "S101", # ok to have asserts in code
    "S311", # ok to use random generator
    "T201", # print is ok sometimes
    "TCH002", # I don't need to wrap type-specific imports into a TYPE_CHECKING block
    "TCH003", # I don't need to wrap type-specific imports into a TYPE_CHECKING block
    "TD002", # todo doesn't have to have a link
    "TD003", # todo doesn't have to have an author
    "TRY003", # ok to specify a string in a error message
]


# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    ".uv",
    ".venv",
    "__pypackages__",
    "build",
    ".langgraph-api",
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ANN001", # Ignore missing arg type in test files
    "ANN201", # Ignore missing return type annotations in test files
    "PLR2004", # allow magic values for more readable tests
    "SLF001", # allow private access
]

[tool.ruff.lint.pylint]
max-args = 6

[tool.mypy]
incremental = true
cache_dir = ".mypy_cache"

# Strict type checking
strict = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# check_untyped_defs = true
# disallow_untyped_decorators = true
# no_implicit_optional = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_return_any = true
# warn_unreachable = true
# strict_equality = true

# # Additional checks
# enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
# disallow_untyped_calls = true
# disallow_subclassing_any = true
# disallow_any_generics = true
# disallow_any_unimported = true
# warn_incomplete_stub = true
